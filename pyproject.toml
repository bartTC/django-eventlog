[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "django-eventlog"
version = "2.1a0"
packages = [{include = "eventlog"}]
description = "django-eventlog stores event messages in a Django model."
authors = ["Martin Mahner <martin@mahner.org>"]
license = "MIT"
readme = ["README.md", "CHANGELOG.md"]
homepage = "https://barttc.github.io/django-eventlog/"
documentation = "https://barttc.github.io/django-eventlog/"
keywords = ["django", "logging", "logger", "events"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
]

[tool.poetry.urls]
source = "https://github.com/bartTC/django-eventlog"
bugtrack = "https://github.com/bartTC/django-eventlog/issues"

[tool.poetry.dependencies]
python = "^3.8"
django = ">=3.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-cov = "^4.1.0"
pytest-django = "^4.8.0"
ruff = "^0.3.3"
django-stubs = "^4.2.7"
mkdocs-material = "^9.5.14"
mkdocs-include-markdown-plugin = "^6.0.4"

[tool.poetry.scripts]
tests = "pytest:main"

[tool.ruff]
target-version = "py38"
exclude = ["migrations"]
lint.select = ["ALL"]
lint.ignore = [
  "ANN101",   # Missing type annotation for `self`
  "ANN401",   # typing.Any is disallowed as function arg type
  "ARG001",   # Unused function argument
  "ARG002",   # Unused method argument
  "D",        # Missing or badly formatted docstrings
  "E501",     # Line too long (>88)
  "ERA001",   # Found commented-out code
  "FBT",      # Flake Boolean Trap (don't use arg=True in functions)
  "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
  "SLF001",   # Private member accessed: `_meta`

  "COM812", # (ruff format) Checks for the absence of trailing commas
  "ISC001", # (ruff format) Checks for implicitly concatenated strings on a single line
]

[tool.ruff.lint.extend-per-file-ignores]
"test_*.py"  = [
  "S101",     # Use of `assert` detected
  "PLR2004",  # Magic value used in comparison, consider replacing 200 with a constant variable
]

[tool.pytest.ini_options]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
addopts = """
    --ds=eventlog.tests.testapp.settings
    --reuse-db
    --cov
"""
filterwarnings = ["ignore::RuntimeWarning"]

[tool.coverage]
run.omit = [
  "eventlog/tests/*",
  "eventlog/migrations/*",
]
report.exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]
